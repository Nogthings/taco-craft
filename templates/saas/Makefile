# TacoCraft SAAS - Makefile
# Comandos para desarrollo y deployment
# Generated by TacoCraft CLI

.PHONY: help install start stop restart build clean logs shell test deploy backup restore

# Variables
PROJECT_NAME={{PROJECT_NAME}}
DOMAIN={{PROJECT_DOMAIN}}
PHP_VERSION={{PHP_VERSION}}
ENV_FILE=.env

# Colores para output
RED=\033[0;31m
GREEN=\033[0;32m
YELLOW=\033[1;33m
BLUE=\033[0;34m
NC=\033[0m # No Color

# Ayuda por defecto
help: ## Muestra esta ayuda
	@echo "$(BLUE)TacoCraft SAAS - $(PROJECT_NAME)$(NC)"
	@echo "$(YELLOW)Comandos disponibles:$(NC)"
	@awk 'BEGIN {FS = ":.*?## "} /^[a-zA-Z_-]+:.*?## / {printf "  $(GREEN)%-15s$(NC) %s\n", $$1, $$2}' $(MAKEFILE_LIST)

# =============================================================================
# DESARROLLO
# =============================================================================

install: ## Instala el proyecto completo
	@echo "$(BLUE)Instalando $(PROJECT_NAME)...$(NC)"
	@if [ ! -f $(ENV_FILE) ]; then \
		cp .env.example $(ENV_FILE); \
		echo "$(YELLOW)Archivo .env creado. Configura las variables antes de continuar.$(NC)"; \
	fi
	@$(MAKE) build
	@$(MAKE) start
	@$(MAKE) setup
	@echo "$(GREEN)✓ Instalación completada$(NC)"

setup: ## Configura la aplicación Laravel
	@echo "$(BLUE)Configurando Laravel...$(NC)"
	docker-compose exec app composer install --optimize-autoloader
	docker-compose exec app php artisan key:generate
	docker-compose exec app php artisan storage:link
	docker-compose exec app php artisan migrate --force
	docker-compose exec app php artisan db:seed
	docker-compose exec app php artisan config:cache
	docker-compose exec app php artisan route:cache
	docker-compose exec app php artisan view:cache
	@$(MAKE) setup-minio
	@echo "$(GREEN)✓ Laravel configurado$(NC)"

setup-minio: ## Configura buckets de MinIO
	@echo "$(BLUE)Configurando MinIO...$(NC)"
	docker-compose exec app php artisan minio:setup
	@echo "$(GREEN)✓ MinIO configurado$(NC)"

build: ## Construye las imágenes Docker
	@echo "$(BLUE)Construyendo imágenes...$(NC)"
	docker-compose build --no-cache
	@echo "$(GREEN)✓ Imágenes construidas$(NC)"

start: ## Inicia todos los servicios
	@echo "$(BLUE)Iniciando servicios...$(NC)"
	docker-compose up -d
	@echo "$(GREEN)✓ Servicios iniciados$(NC)"
	@echo "$(YELLOW)Aplicación disponible en: https://$(DOMAIN)$(NC)"
	@echo "$(YELLOW)MinIO Console: https://$(DOMAIN)/minio$(NC)"
	@echo "$(YELLOW)MailHog: http://localhost:8025$(NC)"

stop: ## Detiene todos los servicios
	@echo "$(BLUE)Deteniendo servicios...$(NC)"
	docker-compose down
	@echo "$(GREEN)✓ Servicios detenidos$(NC)"

restart: ## Reinicia todos los servicios
	@$(MAKE) stop
	@$(MAKE) start

status: ## Muestra el estado de los servicios
	@echo "$(BLUE)Estado de los servicios:$(NC)"
	docker-compose ps

logs: ## Muestra logs de todos los servicios
	docker-compose logs -f

logs-app: ## Muestra logs de la aplicación
	docker-compose logs -f app

logs-nginx: ## Muestra logs de Nginx
	docker-compose logs -f nginx

logs-mysql: ## Muestra logs de MySQL
	docker-compose logs -f mysql

logs-redis: ## Muestra logs de Redis
	docker-compose logs -f redis

logs-minio: ## Muestra logs de MinIO
	docker-compose logs -f minio

# =============================================================================
# SHELL Y DEBUGGING
# =============================================================================

shell: ## Accede al shell de la aplicación
	docker-compose exec app bash

shell-nginx: ## Accede al shell de Nginx
	docker-compose exec nginx sh

shell-mysql: ## Accede al shell de MySQL
	docker-compose exec mysql mysql -u root -p$(shell grep DB_ROOT_PASSWORD .env | cut -d '=' -f2)

shell-redis: ## Accede al shell de Redis
	docker-compose exec redis redis-cli -a $(shell grep REDIS_PASSWORD .env | cut -d '=' -f2)

# =============================================================================
# LARAVEL COMMANDS
# =============================================================================

artisan: ## Ejecuta comando artisan (uso: make artisan cmd="migrate")
	docker-compose exec app php artisan $(cmd)

composer: ## Ejecuta comando composer (uso: make composer cmd="install")
	docker-compose exec app composer $(cmd)

migrate: ## Ejecuta migraciones
	docker-compose exec app php artisan migrate

migrate-fresh: ## Ejecuta migraciones desde cero
	docker-compose exec app php artisan migrate:fresh --seed

seed: ## Ejecuta seeders
	docker-compose exec app php artisan db:seed

cache-clear: ## Limpia todas las cachés
	docker-compose exec app php artisan cache:clear
	docker-compose exec app php artisan config:clear
	docker-compose exec app php artisan route:clear
	docker-compose exec app php artisan view:clear

optimize: ## Optimiza la aplicación para producción
	docker-compose exec app php artisan config:cache
	docker-compose exec app php artisan route:cache
	docker-compose exec app php artisan view:cache
	docker-compose exec app composer install --optimize-autoloader --no-dev

# =============================================================================
# TESTING
# =============================================================================

test: ## Ejecuta tests
	docker-compose exec app php artisan test

test-coverage: ## Ejecuta tests con coverage
	docker-compose exec app php artisan test --coverage

phpstan: ## Ejecuta análisis estático con PHPStan
	docker-compose exec app ./vendor/bin/phpstan analyse

cs-fix: ## Corrige estilo de código
	docker-compose exec app ./vendor/bin/php-cs-fixer fix

# =============================================================================
# BACKUP Y RESTORE
# =============================================================================

backup: ## Crea backup completo
	@echo "$(BLUE)Creando backup...$(NC)"
	@mkdir -p ./backups
	@$(MAKE) backup-db
	@$(MAKE) backup-files
	@echo "$(GREEN)✓ Backup completado$(NC)"

backup-db: ## Backup de base de datos
	@echo "$(BLUE)Backup de base de datos...$(NC)"
	docker-compose exec mysql mysqldump -u root -p$(shell grep DB_ROOT_PASSWORD .env | cut -d '=' -f2) $(shell grep DB_DATABASE .env | cut -d '=' -f2) > ./backups/database_$(shell date +%Y%m%d_%H%M%S).sql
	@echo "$(GREEN)✓ Backup de BD completado$(NC)"

backup-files: ## Backup de archivos MinIO
	@echo "$(BLUE)Backup de archivos...$(NC)"
	docker-compose exec minio mc mirror /data ./backups/minio_$(shell date +%Y%m%d_%H%M%S)
	@echo "$(GREEN)✓ Backup de archivos completado$(NC)"

restore-db: ## Restaura base de datos (uso: make restore-db file=backup.sql)
	@echo "$(BLUE)Restaurando base de datos...$(NC)"
	docker-compose exec -T mysql mysql -u root -p$(shell grep DB_ROOT_PASSWORD .env | cut -d '=' -f2) $(shell grep DB_DATABASE .env | cut -d '=' -f2) < $(file)
	@echo "$(GREEN)✓ Base de datos restaurada$(NC)"

# =============================================================================
# DEPLOYMENT
# =============================================================================

deploy: ## Deploy a producción
	@echo "$(BLUE)Desplegando a producción...$(NC)"
	@$(MAKE) pre-deploy-check
	@$(MAKE) build
	@$(MAKE) stop
	@$(MAKE) start
	@$(MAKE) post-deploy
	@echo "$(GREEN)✓ Deploy completado$(NC)"

pre-deploy-check: ## Verificaciones pre-deploy
	@echo "$(BLUE)Verificando configuración...$(NC)"
	@if [ ! -f $(ENV_FILE) ]; then \
		echo "$(RED)Error: Archivo .env no encontrado$(NC)"; \
		exit 1; \
	fi
	@if grep -q "APP_DEBUG=true" $(ENV_FILE); then \
		echo "$(RED)Error: APP_DEBUG debe ser false en producción$(NC)"; \
		exit 1; \
	fi
	@if grep -q "APP_ENV=local" $(ENV_FILE); then \
		echo "$(RED)Error: APP_ENV debe ser production$(NC)"; \
		exit 1; \
	fi
	@echo "$(GREEN)✓ Configuración válida$(NC)"

post-deploy: ## Tareas post-deploy
	@echo "$(BLUE)Ejecutando tareas post-deploy...$(NC)"
	docker-compose exec app php artisan migrate --force
	docker-compose exec app php artisan config:cache
	docker-compose exec app php artisan route:cache
	docker-compose exec app php artisan view:cache
	docker-compose exec app php artisan queue:restart
	@$(MAKE) health-check
	@echo "$(GREEN)✓ Post-deploy completado$(NC)"

health-check: ## Verifica que la aplicación esté funcionando
	@echo "$(BLUE)Verificando salud de la aplicación...$(NC)"
	@sleep 10
	@curl -f http://localhost/health || (echo "$(RED)Error: Health check falló$(NC)" && exit 1)
	@echo "$(GREEN)✓ Aplicación funcionando correctamente$(NC)"

# =============================================================================
# MANTENIMIENTO
# =============================================================================

clean: ## Limpia contenedores, imágenes y volúmenes no utilizados
	@echo "$(BLUE)Limpiando Docker...$(NC)"
	docker-compose down -v
	docker system prune -f
	docker volume prune -f
	@echo "$(GREEN)✓ Limpieza completada$(NC)"

clean-logs: ## Limpia logs de Nginx
	docker-compose exec nginx sh -c "truncate -s 0 /var/log/nginx/*.log"
	@echo "$(GREEN)✓ Logs limpiados$(NC)"

update: ## Actualiza dependencias
	@echo "$(BLUE)Actualizando dependencias...$(NC)"
	docker-compose exec app composer update
	docker-compose exec app npm update
	@echo "$(GREEN)✓ Dependencias actualizadas$(NC)"

ssl-renew: ## Renueva certificados SSL (Let's Encrypt)
	@echo "$(BLUE)Renovando certificados SSL...$(NC)"
	docker-compose exec nginx certbot renew
	docker-compose exec nginx nginx -s reload
	@echo "$(GREEN)✓ Certificados renovados$(NC)"

# =============================================================================
# MONITORING
# =============================================================================

stats: ## Muestra estadísticas de uso
	@echo "$(BLUE)Estadísticas del sistema:$(NC)"
	docker stats --no-stream

monitor: ## Monitoreo en tiempo real
	docker stats

disk-usage: ## Muestra uso de disco
	@echo "$(BLUE)Uso de disco:$(NC)"
	docker system df
	@echo "\n$(BLUE)Volúmenes:$(NC)"
	docker volume ls

# =============================================================================
# DESARROLLO ESPECÍFICO
# =============================================================================

dev-setup: ## Configuración específica para desarrollo
	@echo "$(BLUE)Configurando entorno de desarrollo...$(NC)"
	docker-compose exec app php artisan telescope:install
	docker-compose exec app php artisan horizon:install
	docker-compose exec app npm install
	docker-compose exec app npm run dev
	@echo "$(GREEN)✓ Entorno de desarrollo configurado$(NC)"

watch: ## Observa cambios en archivos (hot reload)
	docker-compose exec app npm run watch

build-assets: ## Construye assets para producción
	docker-compose exec app npm run production

# =============================================================================
# INFORMACIÓN
# =============================================================================

info: ## Muestra información del proyecto
	@echo "$(BLUE)Información del proyecto:$(NC)"
	@echo "Nombre: $(PROJECT_NAME)"
	@echo "Dominio: $(DOMAIN)"
	@echo "PHP Version: $(PHP_VERSION)"
	@echo "\n$(BLUE)URLs:$(NC)"
	@echo "Aplicación: https://$(DOMAIN)"
	@echo "MinIO Console: https://$(DOMAIN)/minio"
	@echo "MailHog: http://localhost:8025"
	@echo "\n$(BLUE)Estado de servicios:$(NC)"
	@$(MAKE) status

version: ## Muestra versión de componentes
	@echo "$(BLUE)Versiones:$(NC)"
	@echo "Docker: $(shell docker --version)"
	@echo "Docker Compose: $(shell docker-compose --version)"
	@echo "PHP: $(shell docker-compose exec app php --version | head -n1)"
	@echo "Laravel: $(shell docker-compose exec app php artisan --version)"
	@echo "Nginx: $(shell docker-compose exec nginx nginx -v 2>&1)"
	@echo "MySQL: $(shell docker-compose exec mysql mysql --version)"
	@echo "Redis: $(shell docker-compose exec redis redis-server --version)"