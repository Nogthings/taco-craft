#!/bin/bash
# TacoCraft SAAS - Script de Inicialización
# Configura automáticamente el entorno SAAS completo
# Generated by TacoCraft CLI

set -e

# Colores para output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m' # No Color

# Variables del proyecto
PROJECT_NAME="{{PROJECT_NAME}}"
PROJECT_DOMAIN="{{PROJECT_DOMAIN}}"
PHP_VERSION="{{PHP_VERSION}}"
DB_PASSWORD="$(openssl rand -base64 32)"
REDIS_PASSWORD="$(openssl rand -base64 32)"
MINIO_ROOT_PASSWORD="$(openssl rand -base64 32)"
APP_KEY=""

# Función para mostrar mensajes
log_info() {
    echo -e "${BLUE}[INFO]${NC} $1"
}

log_success() {
    echo -e "${GREEN}[SUCCESS]${NC} $1"
}

log_warning() {
    echo -e "${YELLOW}[WARNING]${NC} $1"
}

log_error() {
    echo -e "${RED}[ERROR]${NC} $1"
}

# Función para verificar dependencias
check_dependencies() {
    log_info "Verificando dependencias..."
    
    if ! command -v docker &> /dev/null; then
        log_error "Docker no está instalado"
        exit 1
    fi
    
    if ! command -v docker-compose &> /dev/null; then
        log_error "Docker Compose no está instalado"
        exit 1
    fi
    
    if ! command -v openssl &> /dev/null; then
        log_error "OpenSSL no está instalado"
        exit 1
    fi
    
    log_success "Todas las dependencias están instaladas"
}

# Función para generar archivo .env
generate_env() {
    log_info "Generando archivo .env..."
    
    if [ -f .env ]; then
        log_warning "El archivo .env ya existe. Creando backup..."
        cp .env .env.backup.$(date +%Y%m%d_%H%M%S)
    fi
    
    # Copiar desde .env.example
    cp .env.example .env
    
    # Reemplazar variables
    sed -i "s/{{PROJECT_NAME}}/${PROJECT_NAME}/g" .env
    sed -i "s/{{PROJECT_DOMAIN}}/${PROJECT_DOMAIN}/g" .env
    sed -i "s/{{PHP_VERSION}}/${PHP_VERSION}/g" .env
    
    # Generar contraseñas seguras
    sed -i "s/DB_ROOT_PASSWORD=.*/DB_ROOT_PASSWORD=${DB_PASSWORD}/g" .env
    sed -i "s/DB_PASSWORD=.*/DB_PASSWORD=${DB_PASSWORD}/g" .env
    sed -i "s/REDIS_PASSWORD=.*/REDIS_PASSWORD=${REDIS_PASSWORD}/g" .env
    sed -i "s/MINIO_ROOT_PASSWORD=.*/MINIO_ROOT_PASSWORD=${MINIO_ROOT_PASSWORD}/g" .env
    
    log_success "Archivo .env generado"
}

# Función para configurar SSL
setup_ssl() {
    log_info "Configurando certificados SSL..."
    
    mkdir -p ./docker/nginx/ssl
    
    # Generar certificado auto-firmado para desarrollo
    if [ ! -f "./docker/nginx/ssl/${PROJECT_DOMAIN}.crt" ]; then
        openssl req -x509 -nodes -days 365 -newkey rsa:2048 \
            -keyout "./docker/nginx/ssl/${PROJECT_DOMAIN}.key" \
            -out "./docker/nginx/ssl/${PROJECT_DOMAIN}.crt" \
            -subj "/C=ES/ST=Madrid/L=Madrid/O=${PROJECT_NAME}/CN=${PROJECT_DOMAIN}"
        
        log_success "Certificados SSL generados"
    else
        log_info "Los certificados SSL ya existen"
    fi
}

# Función para configurar directorios
setup_directories() {
    log_info "Configurando directorios..."
    
    # Crear directorios necesarios
    mkdir -p storage/app/public
    mkdir -p storage/framework/cache
    mkdir -p storage/framework/sessions
    mkdir -p storage/framework/views
    mkdir -p storage/logs
    mkdir -p bootstrap/cache
    mkdir -p docker/mysql/data
    mkdir -p docker/redis/data
    mkdir -p docker/minio/data
    mkdir -p docker/nginx/logs
    
    # Configurar permisos
    chmod -R 775 storage
    chmod -R 775 bootstrap/cache
    
    log_success "Directorios configurados"
}

# Función para construir e iniciar servicios
start_services() {
    log_info "Construyendo e iniciando servicios Docker..."
    
    # Construir imágenes
    docker-compose build --no-cache
    
    # Iniciar servicios
    docker-compose up -d
    
    # Esperar a que los servicios estén listos
    log_info "Esperando a que los servicios estén listos..."
    sleep 30
    
    # Verificar que los servicios estén funcionando
    if ! docker-compose ps | grep -q "Up"; then
        log_error "Algunos servicios no se iniciaron correctamente"
        docker-compose logs
        exit 1
    fi
    
    log_success "Servicios Docker iniciados"
}

# Función para configurar Laravel
setup_laravel() {
    log_info "Configurando Laravel..."
    
    # Instalar dependencias de Composer
    docker-compose exec -T app composer install --optimize-autoloader
    
    # Generar clave de aplicación
    docker-compose exec -T app php artisan key:generate
    
    # Crear enlace simbólico para storage
    docker-compose exec -T app php artisan storage:link
    
    # Ejecutar migraciones
    docker-compose exec -T app php artisan migrate --force
    
    # Ejecutar seeders
    docker-compose exec -T app php artisan db:seed --force
    
    # Cachear configuraciones para producción
    docker-compose exec -T app php artisan config:cache
    docker-compose exec -T app php artisan route:cache
    docker-compose exec -T app php artisan view:cache
    
    log_success "Laravel configurado"
}

# Función para configurar MinIO
setup_minio() {
    log_info "Configurando MinIO..."
    
    # Esperar a que MinIO esté listo
    sleep 10
    
    # Configurar buckets y políticas
    docker-compose exec -T app php artisan minio:setup
    
    log_success "MinIO configurado"
}

# Función para instalar paquetes SAAS
install_saas_packages() {
    log_info "Instalando paquetes específicos para SAAS..."
    
    # Instalar paquetes de Composer
    docker-compose exec -T app composer require \
        spatie/laravel-permission \
        intervention/image \
        league/flysystem-aws-s3-v3 \
        predis/predis \
        laravel/sanctum \
        laravel/horizon \
        laravel/telescope \
        spatie/laravel-backup \
        spatie/laravel-activitylog
    
    # Publicar configuraciones
    docker-compose exec -T app php artisan vendor:publish --provider="Spatie\Permission\PermissionServiceProvider"
    docker-compose exec -T app php artisan vendor:publish --provider="Laravel\Sanctum\SanctumServiceProvider"
    docker-compose exec -T app php artisan vendor:publish --provider="Laravel\Horizon\HorizonServiceProvider"
    docker-compose exec -T app php artisan vendor:publish --provider="Laravel\Telescope\TelescopeServiceProvider"
    
    # Ejecutar migraciones de paquetes
    docker-compose exec -T app php artisan migrate --force
    
    log_success "Paquetes SAAS instalados"
}

# Función para configurar multi-tenancy
setup_multitenancy() {
    log_info "Configurando multi-tenancy..."
    
    # Crear migraciones para tenants
    docker-compose exec -T app php artisan make:migration create_tenants_table
    docker-compose exec -T app php artisan make:model Tenant
    docker-compose exec -T app php artisan make:middleware TenantMiddleware
    
    log_success "Multi-tenancy configurado"
}

# Función para verificar instalación
verify_installation() {
    log_info "Verificando instalación..."
    
    # Verificar que la aplicación responda
    if curl -f -k "https://${PROJECT_DOMAIN}/health" &> /dev/null; then
        log_success "Aplicación funcionando correctamente"
    else
        log_warning "La aplicación no responde en el health check"
    fi
    
    # Mostrar información de servicios
    echo -e "\n${BLUE}=== INFORMACIÓN DE SERVICIOS ===${NC}"
    docker-compose ps
    
    echo -e "\n${BLUE}=== URLs DISPONIBLES ===${NC}"
    echo -e "${GREEN}Aplicación:${NC} https://${PROJECT_DOMAIN}"
    echo -e "${GREEN}MinIO Console:${NC} https://${PROJECT_DOMAIN}/minio"
    echo -e "${GREEN}MailHog:${NC} http://localhost:8025"
    echo -e "${GREEN}Horizon:${NC} https://${PROJECT_DOMAIN}/horizon"
    echo -e "${GREEN}Telescope:${NC} https://${PROJECT_DOMAIN}/telescope"
    
    echo -e "\n${BLUE}=== CREDENCIALES ===${NC}"
    echo -e "${GREEN}Base de datos:${NC}"
    echo -e "  Usuario: root"
    echo -e "  Contraseña: ${DB_PASSWORD}"
    echo -e "${GREEN}Redis:${NC}"
    echo -e "  Contraseña: ${REDIS_PASSWORD}"
    echo -e "${GREEN}MinIO:${NC}"
    echo -e "  Usuario: minioadmin"
    echo -e "  Contraseña: ${MINIO_ROOT_PASSWORD}"
}

# Función para mostrar ayuda
show_help() {
    echo -e "${BLUE}TacoCraft SAAS - Script de Inicialización${NC}"
    echo -e "\nUso: $0 [opciones]"
    echo -e "\nOpciones:"
    echo -e "  -h, --help     Muestra esta ayuda"
    echo -e "  --skip-ssl     Omite la configuración SSL"
    echo -e "  --dev          Configuración para desarrollo"
    echo -e "  --prod         Configuración para producción"
    echo -e "\nEjemplos:"
    echo -e "  $0              # Instalación completa"
    echo -e "  $0 --dev        # Instalación para desarrollo"
    echo -e "  $0 --skip-ssl   # Instalación sin SSL"
}

# Función principal
main() {
    local skip_ssl=false
    local environment="production"
    
    # Procesar argumentos
    while [[ $# -gt 0 ]]; do
        case $1 in
            -h|--help)
                show_help
                exit 0
                ;;
            --skip-ssl)
                skip_ssl=true
                shift
                ;;
            --dev)
                environment="development"
                shift
                ;;
            --prod)
                environment="production"
                shift
                ;;
            *)
                log_error "Opción desconocida: $1"
                show_help
                exit 1
                ;;
        esac
    done
    
    echo -e "${BLUE}=== TACOCRAFT SAAS INITIALIZATION ===${NC}"
    echo -e "Proyecto: ${GREEN}${PROJECT_NAME}${NC}"
    echo -e "Dominio: ${GREEN}${PROJECT_DOMAIN}${NC}"
    echo -e "Entorno: ${GREEN}${environment}${NC}"
    echo -e "\n${YELLOW}Iniciando configuración...${NC}\n"
    
    # Ejecutar pasos de instalación
    check_dependencies
    generate_env
    setup_directories
    
    if [ "$skip_ssl" = false ]; then
        setup_ssl
    fi
    
    start_services
    setup_laravel
    setup_minio
    install_saas_packages
    setup_multitenancy
    verify_installation
    
    echo -e "\n${GREEN}=== INSTALACIÓN COMPLETADA ===${NC}"
    echo -e "${YELLOW}Tu aplicación SAAS está lista para usar!${NC}"
    echo -e "\n${BLUE}Próximos pasos:${NC}"
    echo -e "1. Configura tu dominio para apuntar a este servidor"
    echo -e "2. Configura certificados SSL de Let's Encrypt si es necesario"
    echo -e "3. Personaliza la configuración en el archivo .env"
    echo -e "4. Revisa y personaliza las migraciones y seeders"
    echo -e "\n${BLUE}Comandos útiles:${NC}"
    echo -e "  make help       # Ver todos los comandos disponibles"
    echo -e "  make logs       # Ver logs de todos los servicios"
    echo -e "  make shell      # Acceder al shell de la aplicación"
    echo -e "  make backup     # Crear backup completo"
}

# Ejecutar función principal
main "$@"