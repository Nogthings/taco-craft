#!/bin/bash
# TacoCraft SAAS - Script de Deployment
# Deploy seguro para producci√≥n con verificaciones y rollback
# Generated by TacoCraft CLI

set -e

# Colores para output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m' # No Color

# Variables del proyecto
PROJECT_NAME="{{PROJECT_NAME}}"
PROJECT_DOMAIN="{{PROJECT_DOMAIN}}"
DEPLOY_USER="deploy"
DEPLOY_PATH="/var/www/${PROJECT_NAME}"
BACKUP_PATH="/var/backups/${PROJECT_NAME}"
MAX_BACKUPS=5
HEALTH_CHECK_URL="https://${PROJECT_DOMAIN}/health"
SLACK_WEBHOOK=""  # Configurar si se desea notificaciones

# Funci√≥n para mostrar mensajes
log_info() {
    echo -e "${BLUE}[INFO]${NC} $1"
}

log_success() {
    echo -e "${GREEN}[SUCCESS]${NC} $1"
}

log_warning() {
    echo -e "${YELLOW}[WARNING]${NC} $1"
}

log_error() {
    echo -e "${RED}[ERROR]${NC} $1"
}

# Funci√≥n para enviar notificaciones a Slack
notify_slack() {
    local message="$1"
    local color="$2"
    
    if [ -n "$SLACK_WEBHOOK" ]; then
        curl -X POST -H 'Content-type: application/json' \
            --data "{\"attachments\":[{\"color\":\"$color\",\"text\":\"$message\"}]}" \
            "$SLACK_WEBHOOK" &> /dev/null || true
    fi
}

# Funci√≥n para verificar prerrequisitos
check_prerequisites() {
    log_info "Verificando prerrequisitos..."
    
    # Verificar que estamos en el directorio correcto
    if [ ! -f "docker-compose.yml" ]; then
        log_error "No se encontr√≥ docker-compose.yml. Ejecuta desde el directorio del proyecto."
        exit 1
    fi
    
    # Verificar que existe el archivo .env
    if [ ! -f ".env" ]; then
        log_error "No se encontr√≥ el archivo .env"
        exit 1
    fi
    
    # Verificar configuraci√≥n de producci√≥n
    if grep -q "APP_DEBUG=true" .env; then
        log_error "APP_DEBUG debe ser false en producci√≥n"
        exit 1
    fi
    
    if grep -q "APP_ENV=local" .env; then
        log_error "APP_ENV debe ser production"
        exit 1
    fi
    
    # Verificar que Docker est√° funcionando
    if ! docker info &> /dev/null; then
        log_error "Docker no est√° funcionando"
        exit 1
    fi
    
    # Verificar espacio en disco
    local available_space=$(df / | awk 'NR==2 {print $4}')
    if [ "$available_space" -lt 1048576 ]; then  # 1GB en KB
        log_warning "Espacio en disco bajo: $(($available_space / 1024))MB disponibles"
    fi
    
    log_success "Prerrequisitos verificados"
}

# Funci√≥n para crear backup
create_backup() {
    log_info "Creando backup antes del deploy..."
    
    local timestamp=$(date +%Y%m%d_%H%M%S)
    local backup_dir="${BACKUP_PATH}/${timestamp}"
    
    # Crear directorio de backup
    mkdir -p "$backup_dir"
    
    # Backup de base de datos
    log_info "Backup de base de datos..."
    docker-compose exec -T mysql mysqldump \
        -u root \
        -p$(grep DB_ROOT_PASSWORD .env | cut -d '=' -f2) \
        $(grep DB_DATABASE .env | cut -d '=' -f2) \
        > "${backup_dir}/database.sql"
    
    # Backup de archivos de MinIO
    log_info "Backup de archivos MinIO..."
    docker-compose exec -T minio mc mirror /data "${backup_dir}/minio" &> /dev/null || true
    
    # Backup de configuraci√≥n
    log_info "Backup de configuraci√≥n..."
    cp .env "${backup_dir}/env.backup"
    cp docker-compose.yml "${backup_dir}/docker-compose.backup.yml"
    
    # Comprimir backup
    tar -czf "${backup_dir}.tar.gz" -C "$BACKUP_PATH" "$(basename $backup_dir)"
    rm -rf "$backup_dir"
    
    # Limpiar backups antiguos
    ls -t ${BACKUP_PATH}/*.tar.gz | tail -n +$((MAX_BACKUPS + 1)) | xargs -r rm -f
    
    echo "$timestamp" > "${BACKUP_PATH}/latest_backup"
    
    log_success "Backup creado: ${backup_dir}.tar.gz"
}

# Funci√≥n para verificar salud de la aplicaci√≥n
health_check() {
    local max_attempts=30
    local attempt=1
    
    log_info "Verificando salud de la aplicaci√≥n..."
    
    while [ $attempt -le $max_attempts ]; do
        if curl -f -s -k "$HEALTH_CHECK_URL" &> /dev/null; then
            log_success "Aplicaci√≥n funcionando correctamente"
            return 0
        fi
        
        log_info "Intento $attempt/$max_attempts - Esperando..."
        sleep 10
        ((attempt++))
    done
    
    log_error "Health check fall√≥ despu√©s de $max_attempts intentos"
    return 1
}

# Funci√≥n para rollback
rollback() {
    log_warning "Iniciando rollback..."
    
    local latest_backup=$(cat "${BACKUP_PATH}/latest_backup" 2>/dev/null || echo "")
    
    if [ -z "$latest_backup" ]; then
        log_error "No se encontr√≥ backup para rollback"
        return 1
    fi
    
    local backup_file="${BACKUP_PATH}/${latest_backup}.tar.gz"
    
    if [ ! -f "$backup_file" ]; then
        log_error "Archivo de backup no encontrado: $backup_file"
        return 1
    fi
    
    # Detener servicios
    docker-compose down
    
    # Extraer backup
    tar -xzf "$backup_file" -C "$BACKUP_PATH"
    
    # Restaurar configuraci√≥n
    cp "${BACKUP_PATH}/${latest_backup}/env.backup" .env
    cp "${BACKUP_PATH}/${latest_backup}/docker-compose.backup.yml" docker-compose.yml
    
    # Iniciar servicios
    docker-compose up -d
    
    # Esperar a que los servicios est√©n listos
    sleep 30
    
    # Restaurar base de datos
    docker-compose exec -T mysql mysql \
        -u root \
        -p$(grep DB_ROOT_PASSWORD .env | cut -d '=' -f2) \
        $(grep DB_DATABASE .env | cut -d '=' -f2) \
        < "${BACKUP_PATH}/${latest_backup}/database.sql"
    
    # Limpiar directorio temporal
    rm -rf "${BACKUP_PATH}/${latest_backup}"
    
    log_success "Rollback completado"
    notify_slack "üîÑ Rollback completado para ${PROJECT_NAME}" "warning"
}

# Funci√≥n para deploy
deploy() {
    log_info "Iniciando deploy de ${PROJECT_NAME}..."
    notify_slack "üöÄ Iniciando deploy de ${PROJECT_NAME}" "good"
    
    # Verificar prerrequisitos
    check_prerequisites
    
    # Crear backup
    create_backup
    
    # Pull de im√°genes m√°s recientes
    log_info "Actualizando im√°genes Docker..."
    docker-compose pull
    
    # Construir im√°genes
    log_info "Construyendo im√°genes..."
    docker-compose build --no-cache
    
    # Detener servicios actuales
    log_info "Deteniendo servicios actuales..."
    docker-compose down
    
    # Iniciar nuevos servicios
    log_info "Iniciando nuevos servicios..."
    docker-compose up -d
    
    # Esperar a que los servicios est√©n listos
    log_info "Esperando a que los servicios est√©n listos..."
    sleep 30
    
    # Ejecutar migraciones
    log_info "Ejecutando migraciones..."
    docker-compose exec -T app php artisan migrate --force
    
    # Limpiar y cachear configuraciones
    log_info "Optimizando aplicaci√≥n..."
    docker-compose exec -T app php artisan config:cache
    docker-compose exec -T app php artisan route:cache
    docker-compose exec -T app php artisan view:cache
    docker-compose exec -T app php artisan queue:restart
    
    # Verificar salud de la aplicaci√≥n
    if health_check; then
        log_success "Deploy completado exitosamente"
        notify_slack "‚úÖ Deploy completado exitosamente para ${PROJECT_NAME}" "good"
        
        # Mostrar informaci√≥n del deploy
        show_deploy_info
    else
        log_error "Deploy fall√≥ en health check"
        notify_slack "‚ùå Deploy fall√≥ para ${PROJECT_NAME} - Iniciando rollback" "danger"
        
        if rollback; then
            log_info "Rollback completado. Verificando..."
            if health_check; then
                log_success "Aplicaci√≥n restaurada correctamente"
            else
                log_error "Rollback fall√≥. Intervenci√≥n manual requerida."
                notify_slack "üö® Rollback fall√≥ para ${PROJECT_NAME} - Intervenci√≥n manual requerida" "danger"
            fi
        fi
        
        exit 1
    fi
}

# Funci√≥n para mostrar informaci√≥n del deploy
show_deploy_info() {
    echo -e "\n${BLUE}=== INFORMACI√ìN DEL DEPLOY ===${NC}"
    echo -e "Proyecto: ${GREEN}${PROJECT_NAME}${NC}"
    echo -e "Dominio: ${GREEN}${PROJECT_DOMAIN}${NC}"
    echo -e "Timestamp: ${GREEN}$(date)${NC}"
    
    echo -e "\n${BLUE}=== ESTADO DE SERVICIOS ===${NC}"
    docker-compose ps
    
    echo -e "\n${BLUE}=== URLs DISPONIBLES ===${NC}"
    echo -e "${GREEN}Aplicaci√≥n:${NC} https://${PROJECT_DOMAIN}"
    echo -e "${GREEN}Health Check:${NC} ${HEALTH_CHECK_URL}"
    echo -e "${GREEN}MinIO Console:${NC} https://${PROJECT_DOMAIN}/minio"
    
    echo -e "\n${BLUE}=== ESTAD√çSTICAS ===${NC}"
    echo -e "${GREEN}Uso de CPU:${NC}"
    docker stats --no-stream --format "table {{.Name}}\t{{.CPUPerc}}\t{{.MemUsage}}"
    
    echo -e "\n${GREEN}Uso de disco:${NC}"
    docker system df
}

# Funci√≥n para mostrar ayuda
show_help() {
    echo -e "${BLUE}TacoCraft SAAS - Script de Deployment${NC}"
    echo -e "\nUso: $0 [comando] [opciones]"
    echo -e "\nComandos:"
    echo -e "  deploy         Deploy completo (por defecto)"
    echo -e "  rollback       Rollback al √∫ltimo backup"
    echo -e "  backup         Crear backup manual"
    echo -e "  health         Verificar salud de la aplicaci√≥n"
    echo -e "  info           Mostrar informaci√≥n del deploy"
    echo -e "  help           Mostrar esta ayuda"
    echo -e "\nOpciones:"
    echo -e "  --force        Forzar deploy sin confirmaci√≥n"
    echo -e "  --no-backup    Omitir creaci√≥n de backup"
    echo -e "  --slack-webhook URL  Webhook de Slack para notificaciones"
    echo -e "\nEjemplos:"
    echo -e "  $0                    # Deploy completo"
    echo -e "  $0 deploy --force     # Deploy sin confirmaci√≥n"
    echo -e "  $0 rollback           # Rollback al √∫ltimo backup"
    echo -e "  $0 backup             # Crear backup manual"
}

# Funci√≥n principal
main() {
    local command="deploy"
    local force=false
    local no_backup=false
    
    # Procesar argumentos
    while [[ $# -gt 0 ]]; do
        case $1 in
            deploy|rollback|backup|health|info|help)
                command="$1"
                shift
                ;;
            --force)
                force=true
                shift
                ;;
            --no-backup)
                no_backup=true
                shift
                ;;
            --slack-webhook)
                SLACK_WEBHOOK="$2"
                shift 2
                ;;
            *)
                log_error "Opci√≥n desconocida: $1"
                show_help
                exit 1
                ;;
        esac
    done
    
    # Ejecutar comando
    case $command in
        deploy)
            if [ "$force" = false ]; then
                echo -e "${YELLOW}¬øEst√°s seguro de que quieres hacer deploy a producci√≥n? (y/N)${NC}"
                read -r confirmation
                if [[ ! $confirmation =~ ^[Yy]$ ]]; then
                    log_info "Deploy cancelado"
                    exit 0
                fi
            fi
            
            if [ "$no_backup" = true ]; then
                log_warning "Omitiendo creaci√≥n de backup"
            fi
            
            deploy
            ;;
        rollback)
            echo -e "${YELLOW}¬øEst√°s seguro de que quieres hacer rollback? (y/N)${NC}"
            read -r confirmation
            if [[ $confirmation =~ ^[Yy]$ ]]; then
                rollback
            else
                log_info "Rollback cancelado"
            fi
            ;;
        backup)
            create_backup
            ;;
        health)
            health_check
            ;;
        info)
            show_deploy_info
            ;;
        help)
            show_help
            ;;
        *)
            log_error "Comando desconocido: $command"
            show_help
            exit 1
            ;;
    esac
}

# Configurar trap para cleanup en caso de error
trap 'log_error "Deploy interrumpido"; notify_slack "‚ö†Ô∏è Deploy interrumpido para ${PROJECT_NAME}" "warning"; exit 1' INT TERM

# Ejecutar funci√≥n principal
main "$@"