#!/bin/bash
# TacoCraft SAAS - Configuración de Seguridad
# Script para configurar seguridad básica del servidor
# Generated by TacoCraft CLI

set -e

# Colores para output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m' # No Color

# Variables de configuración
PROJECT_NAME="{{PROJECT_NAME}}"
PROJECT_DOMAIN="{{PROJECT_DOMAIN}}"
SSH_PORT="22"
FAIL2BAN_ENABLED=true
FIREWALL_ENABLED=true
AUTO_UPDATES=true

# Función para mostrar mensajes
log_info() {
    echo -e "${BLUE}[INFO]${NC} $1"
}

log_success() {
    echo -e "${GREEN}[SUCCESS]${NC} $1"
}

log_warning() {
    echo -e "${YELLOW}[WARNING]${NC} $1"
}

log_error() {
    echo -e "${RED}[ERROR]${NC} $1"
}

# Función para verificar si el usuario es root
check_root() {
    if [ "$EUID" -ne 0 ]; then
        log_error "Este script debe ejecutarse como root"
        exit 1
    fi
}

# Función para detectar el sistema operativo
detect_os() {
    if [ -f /etc/os-release ]; then
        . /etc/os-release
        OS=$NAME
        VER=$VERSION_ID
    else
        log_error "No se pudo detectar el sistema operativo"
        exit 1
    fi
    
    log_info "Sistema detectado: $OS $VER"
}

# Función para actualizar el sistema
update_system() {
    log_info "Actualizando el sistema..."
    
    if [[ $OS == *"Ubuntu"* ]] || [[ $OS == *"Debian"* ]]; then
        apt-get update
        apt-get upgrade -y
        apt-get autoremove -y
    elif [[ $OS == *"CentOS"* ]] || [[ $OS == *"Red Hat"* ]]; then
        yum update -y
    else
        log_warning "Sistema operativo no soportado para actualizaciones automáticas"
        return
    fi
    
    log_success "Sistema actualizado"
}

# Función para configurar actualizaciones automáticas
setup_auto_updates() {
    if [ "$AUTO_UPDATES" = false ]; then
        return
    fi
    
    log_info "Configurando actualizaciones automáticas..."
    
    if [[ $OS == *"Ubuntu"* ]] || [[ $OS == *"Debian"* ]]; then
        apt-get install -y unattended-upgrades
        
        cat > /etc/apt/apt.conf.d/50unattended-upgrades << EOF
Unattended-Upgrade::Allowed-Origins {
    "\${distro_id}:\${distro_codename}-security";
    "\${distro_id}ESMApps:\${distro_codename}-apps-security";
    "\${distro_id}ESM:\${distro_codename}-infra-security";
};

Unattended-Upgrade::Package-Blacklist {
};

Unattended-Upgrade::DevRelease "false";
Unattended-Upgrade::Remove-Unused-Dependencies "true";
Unattended-Upgrade::Automatic-Reboot "false";
Unattended-Upgrade::Automatic-Reboot-Time "02:00";
EOF
        
        cat > /etc/apt/apt.conf.d/20auto-upgrades << EOF
APT::Periodic::Update-Package-Lists "1";
APT::Periodic::Unattended-Upgrade "1";
EOF
        
        systemctl enable unattended-upgrades
        systemctl start unattended-upgrades
        
    elif [[ $OS == *"CentOS"* ]] || [[ $OS == *"Red Hat"* ]]; then
        yum install -y yum-cron
        
        sed -i 's/apply_updates = no/apply_updates = yes/' /etc/yum/yum-cron.conf
        
        systemctl enable yum-cron
        systemctl start yum-cron
    fi
    
    log_success "Actualizaciones automáticas configuradas"
}

# Función para configurar el firewall
setup_firewall() {
    if [ "$FIREWALL_ENABLED" = false ]; then
        return
    fi
    
    log_info "Configurando firewall..."
    
    if command -v ufw &> /dev/null; then
        # Ubuntu/Debian con UFW
        ufw --force reset
        ufw default deny incoming
        ufw default allow outgoing
        
        # Permitir SSH
        ufw allow $SSH_PORT/tcp
        
        # Permitir HTTP y HTTPS
        ufw allow 80/tcp
        ufw allow 443/tcp
        
        # Permitir puertos específicos del proyecto
        ufw allow 8025/tcp  # MailHog
        
        # Activar firewall
        ufw --force enable
        
    elif command -v firewall-cmd &> /dev/null; then
        # CentOS/RHEL con firewalld
        systemctl enable firewalld
        systemctl start firewalld
        
        # Configurar zona pública
        firewall-cmd --permanent --zone=public --add-service=ssh
        firewall-cmd --permanent --zone=public --add-service=http
        firewall-cmd --permanent --zone=public --add-service=https
        
        # Puerto personalizado para SSH si es diferente
        if [ "$SSH_PORT" != "22" ]; then
            firewall-cmd --permanent --zone=public --add-port=$SSH_PORT/tcp
            firewall-cmd --permanent --zone=public --remove-service=ssh
        fi
        
        # MailHog
        firewall-cmd --permanent --zone=public --add-port=8025/tcp
        
        firewall-cmd --reload
        
    else
        log_warning "No se encontró UFW ni firewalld. Configurando iptables básico..."
        
        # Configuración básica de iptables
        iptables -F
        iptables -P INPUT DROP
        iptables -P FORWARD DROP
        iptables -P OUTPUT ACCEPT
        
        # Permitir loopback
        iptables -A INPUT -i lo -j ACCEPT
        
        # Permitir conexiones establecidas
        iptables -A INPUT -m state --state ESTABLISHED,RELATED -j ACCEPT
        
        # Permitir SSH
        iptables -A INPUT -p tcp --dport $SSH_PORT -j ACCEPT
        
        # Permitir HTTP y HTTPS
        iptables -A INPUT -p tcp --dport 80 -j ACCEPT
        iptables -A INPUT -p tcp --dport 443 -j ACCEPT
        
        # Permitir MailHog
        iptables -A INPUT -p tcp --dport 8025 -j ACCEPT
        
        # Guardar reglas
        if command -v iptables-save &> /dev/null; then
            iptables-save > /etc/iptables/rules.v4
        fi
    fi
    
    log_success "Firewall configurado"
}

# Función para configurar Fail2Ban
setup_fail2ban() {
    if [ "$FAIL2BAN_ENABLED" = false ]; then
        return
    fi
    
    log_info "Configurando Fail2Ban..."
    
    if [[ $OS == *"Ubuntu"* ]] || [[ $OS == *"Debian"* ]]; then
        apt-get install -y fail2ban
    elif [[ $OS == *"CentOS"* ]] || [[ $OS == *"Red Hat"* ]]; then
        yum install -y epel-release
        yum install -y fail2ban
    fi
    
    # Configuración personalizada
    cat > /etc/fail2ban/jail.local << EOF
[DEFAULT]
bantime = 3600
findtime = 600
maxretry = 3
ignoreip = 127.0.0.1/8 ::1

[sshd]
enabled = true
port = $SSH_PORT
filter = sshd
logpath = /var/log/auth.log
maxretry = 3
bantime = 3600

[nginx-http-auth]
enabled = true
filter = nginx-http-auth
logpath = /var/log/nginx/error.log
maxretry = 3
bantime = 3600

[nginx-limit-req]
enabled = true
filter = nginx-limit-req
logpath = /var/log/nginx/error.log
maxretry = 10
bantime = 600

[nginx-botsearch]
enabled = true
filter = nginx-botsearch
logpath = /var/log/nginx/access.log
maxretry = 2
bantime = 7200
EOF
    
    # Crear filtros personalizados
    cat > /etc/fail2ban/filter.d/nginx-botsearch.conf << EOF
[Definition]
failregex = ^<HOST> -.*\"(GET|POST).*\/(wp-admin|wp-login|phpmyadmin|admin|xmlrpc)
            ^<HOST> -.*\"(GET|POST).*(\\.|%2e)(\\.|%2e)(\\/|%2f)
            ^<HOST> -.*\"(GET|POST).*(etc\\/passwd|proc\\/self\\/environ)
ignoreregex =
EOF
    
    # Iniciar y habilitar Fail2Ban
    systemctl enable fail2ban
    systemctl start fail2ban
    
    log_success "Fail2Ban configurado"
}

# Función para configurar SSH
setup_ssh() {
    log_info "Configurando SSH..."
    
    # Backup de la configuración original
    cp /etc/ssh/sshd_config /etc/ssh/sshd_config.backup.$(date +%Y%m%d_%H%M%S)
    
    # Configuración segura de SSH
    cat > /etc/ssh/sshd_config << EOF
# TacoCraft SAAS - Configuración SSH Segura

# Puerto SSH
Port $SSH_PORT

# Protocolo
Protocol 2

# Autenticación
PermitRootLogin no
PasswordAuthentication yes
PubkeyAuthentication yes
AuthorizedKeysFile .ssh/authorized_keys

# Configuraciones de seguridad
PermitEmptyPasswords no
ChallengeResponseAuthentication no
UsePAM yes

# Límites de conexión
MaxAuthTries 3
MaxSessions 2
ClientAliveInterval 300
ClientAliveCountMax 2

# Configuraciones adicionales
X11Forwarding no
AllowTcpForwarding no
GatewayPorts no
PermitTunnel no

# Logging
SyslogFacility AUTH
LogLevel INFO

# Banner
Banner /etc/ssh/banner
EOF
    
    # Crear banner de SSH
    cat > /etc/ssh/banner << EOF
***************************************************************************
                    SISTEMA AUTORIZADO SOLAMENTE
                    
    Este sistema es para uso autorizado únicamente.
    Todas las actividades son monitoreadas y registradas.
    El acceso no autorizado está prohibido.
    
    Proyecto: $PROJECT_NAME
    Dominio: $PROJECT_DOMAIN
***************************************************************************
EOF
    
    # Reiniciar SSH
    systemctl restart sshd
    
    log_success "SSH configurado en puerto $SSH_PORT"
    log_warning "IMPORTANTE: Asegúrate de poder conectarte por SSH antes de cerrar esta sesión"
}

# Función para configurar límites del sistema
setup_system_limits() {
    log_info "Configurando límites del sistema..."
    
    # Configurar límites en /etc/security/limits.conf
    cat >> /etc/security/limits.conf << EOF

# TacoCraft SAAS - Límites del sistema
* soft nofile 65536
* hard nofile 65536
* soft nproc 32768
* hard nproc 32768
root soft nofile 65536
root hard nofile 65536
EOF
    
    # Configurar límites del kernel
    cat >> /etc/sysctl.conf << EOF

# TacoCraft SAAS - Configuración del kernel
net.core.somaxconn = 65535
net.core.netdev_max_backlog = 5000
net.ipv4.tcp_max_syn_backlog = 65535
net.ipv4.tcp_fin_timeout = 30
net.ipv4.tcp_keepalive_time = 1200
net.ipv4.tcp_max_tw_buckets = 400000
net.ipv4.tcp_tw_reuse = 1
net.ipv4.ip_local_port_range = 1024 65535
vm.swappiness = 10
fs.file-max = 2097152
EOF
    
    # Aplicar configuración
    sysctl -p
    
    log_success "Límites del sistema configurados"
}

# Función para configurar logging
setup_logging() {
    log_info "Configurando logging de seguridad..."
    
    # Configurar logrotate para logs de seguridad
    cat > /etc/logrotate.d/security << EOF
/var/log/auth.log
/var/log/fail2ban.log
/var/log/nginx/access.log
/var/log/nginx/error.log {
    daily
    missingok
    rotate 52
    compress
    delaycompress
    notifempty
    create 0640 root adm
    postrotate
        systemctl reload nginx
        systemctl reload fail2ban
    endscript
}
EOF
    
    # Configurar auditd si está disponible
    if command -v auditd &> /dev/null; then
        cat >> /etc/audit/rules.d/audit.rules << EOF

# TacoCraft SAAS - Reglas de auditoría
-w /etc/passwd -p wa -k identity
-w /etc/group -p wa -k identity
-w /etc/shadow -p wa -k identity
-w /etc/sudoers -p wa -k identity
-w /var/log/auth.log -p wa -k auth
-w /var/log/nginx/ -p wa -k webserver
EOF
        
        systemctl restart auditd
    fi
    
    log_success "Logging de seguridad configurado"
}

# Función para crear usuario de deploy
create_deploy_user() {
    log_info "Creando usuario de deploy..."
    
    # Crear usuario si no existe
    if ! id "$DEPLOY_USER" &>/dev/null; then
        useradd -m -s /bin/bash "$DEPLOY_USER"
        
        # Agregar al grupo docker
        usermod -aG docker "$DEPLOY_USER"
        
        # Configurar sudo sin contraseña para comandos específicos
        cat > "/etc/sudoers.d/$DEPLOY_USER" << EOF
$DEPLOY_USER ALL=(ALL) NOPASSWD: /usr/bin/docker, /usr/bin/docker-compose, /bin/systemctl restart nginx, /bin/systemctl reload nginx
EOF
        
        # Crear directorio SSH
        mkdir -p "/home/$DEPLOY_USER/.ssh"
        chmod 700 "/home/$DEPLOY_USER/.ssh"
        chown "$DEPLOY_USER:$DEPLOY_USER" "/home/$DEPLOY_USER/.ssh"
        
        log_success "Usuario $DEPLOY_USER creado"
        log_info "Configura la clave SSH para el usuario $DEPLOY_USER"
    else
        log_info "El usuario $DEPLOY_USER ya existe"
    fi
}

# Función para mostrar resumen de seguridad
show_security_summary() {
    echo -e "\n${BLUE}=== RESUMEN DE CONFIGURACIÓN DE SEGURIDAD ===${NC}"
    echo -e "Proyecto: ${GREEN}$PROJECT_NAME${NC}"
    echo -e "Dominio: ${GREEN}$PROJECT_DOMAIN${NC}"
    echo -e "\n${BLUE}Configuraciones aplicadas:${NC}"
    echo -e "${GREEN}✓${NC} Sistema actualizado"
    
    if [ "$AUTO_UPDATES" = true ]; then
        echo -e "${GREEN}✓${NC} Actualizaciones automáticas habilitadas"
    fi
    
    if [ "$FIREWALL_ENABLED" = true ]; then
        echo -e "${GREEN}✓${NC} Firewall configurado"
    fi
    
    if [ "$FAIL2BAN_ENABLED" = true ]; then
        echo -e "${GREEN}✓${NC} Fail2Ban configurado"
    fi
    
    echo -e "${GREEN}✓${NC} SSH configurado en puerto $SSH_PORT"
    echo -e "${GREEN}✓${NC} Límites del sistema configurados"
    echo -e "${GREEN}✓${NC} Logging de seguridad configurado"
    echo -e "${GREEN}✓${NC} Usuario de deploy creado"
    
    echo -e "\n${BLUE}Próximos pasos:${NC}"
    echo -e "1. Configura claves SSH para el usuario $DEPLOY_USER"
    echo -e "2. Prueba la conexión SSH en el puerto $SSH_PORT"
    echo -e "3. Configura certificados SSL con Let's Encrypt"
    echo -e "4. Revisa los logs de seguridad regularmente"
    
    echo -e "\n${YELLOW}IMPORTANTE:${NC}"
    echo -e "- SSH ahora usa el puerto $SSH_PORT"
    echo -e "- El acceso root por SSH está deshabilitado"
    echo -e "- Fail2Ban está monitoreando intentos de acceso"
}

# Función para mostrar ayuda
show_help() {
    echo -e "${BLUE}TacoCraft SAAS - Configuración de Seguridad${NC}"
    echo -e "\nUso: $0 [opciones]"
    echo -e "\nOpciones:"
    echo -e "  --ssh-port PORT        Puerto SSH (por defecto: 22)"
    echo -e "  --no-fail2ban          Deshabilitar Fail2Ban"
    echo -e "  --no-firewall          Deshabilitar firewall"
    echo -e "  --no-auto-updates      Deshabilitar actualizaciones automáticas"
    echo -e "  --help                 Mostrar esta ayuda"
    echo -e "\nEjemplos:"
    echo -e "  $0                     # Configuración completa"
    echo -e "  $0 --ssh-port 2222     # Cambiar puerto SSH"
    echo -e "  $0 --no-fail2ban       # Sin Fail2Ban"
}

# Función principal
main() {
    # Procesar argumentos
    while [[ $# -gt 0 ]]; do
        case $1 in
            --ssh-port)
                SSH_PORT="$2"
                shift 2
                ;;
            --no-fail2ban)
                FAIL2BAN_ENABLED=false
                shift
                ;;
            --no-firewall)
                FIREWALL_ENABLED=false
                shift
                ;;
            --no-auto-updates)
                AUTO_UPDATES=false
                shift
                ;;
            --help)
                show_help
                exit 0
                ;;
            *)
                log_error "Opción desconocida: $1"
                show_help
                exit 1
                ;;
        esac
    done
    
    echo -e "${BLUE}=== TACOCRAFT SAAS SECURITY SETUP ===${NC}"
    echo -e "Configurando seguridad para: ${GREEN}$PROJECT_NAME${NC}\n"
    
    # Verificar permisos de root
    check_root
    
    # Detectar sistema operativo
    detect_os
    
    # Ejecutar configuraciones
    update_system
    setup_auto_updates
    setup_firewall
    setup_fail2ban
    setup_ssh
    setup_system_limits
    setup_logging
    create_deploy_user
    
    # Mostrar resumen
    show_security_summary
    
    echo -e "\n${GREEN}=== CONFIGURACIÓN DE SEGURIDAD COMPLETADA ===${NC}"
    log_warning "Reinicia el servidor para aplicar todos los cambios"
}

# Ejecutar función principal
main "$@"